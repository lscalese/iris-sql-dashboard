<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for UNIX (Ubuntu Server LTS for x86-64 Containers) 2024.1.2 (Build 398U)" ts="2025-02-13 21:14:43">
<Class name="dc.sqlstats.dao.SQLStatsDAO">
<Super>%RegisteredObject</Super>
<TimeChanged>67249,72687.256514907</TimeChanged>
<TimeCreated>67249,72687.256514907</TimeCreated>

<Method name="GetDailyStats">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:dc.sqlstats.dto.FilterStatsDTO,initList:%ListOfObjects=""</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    Set ns = $Namespace

    If $IsObject(initList) {
        Set stats = initList
    } Else {
        Set stats = ##class(%ListOfObjects).%New()
    }
    
    Try {
        New $ROLES
        Set $ROLES = "%ALL"
        
        If $Namespace '= filter.namespace {
            New $NAMESPACE
            Set $NAMESPACE = filter.namespace
        }

        Set args($Increment(args)) = $Piece(filter.from, " ", 1)
        Set args($Increment(args)) = $Piece(filter.to, " ", 1)

        Set sql = "SELECT t1.ID, t2.Hash, t2.Statement, t1.Day, t1.StatCount, t1.StatTotal, t1.StatRowCount, t1.StatCommands, t1.StatVariance "
                    _ "FROM INFORMATION_SCHEMA.STATEMENT_DAILY_STATS t1 "
                    _ "INNER JOIN INFORMATION_SCHEMA.STATEMENTS t2 ON t1.Statement = t2.Hash "
                    _ "WHERE t1.Day >= ? AND t1.Day <= ?"

        Set irisMajorVersion = $SYSTEM.Version.GetMajor()
        ; try to be compatible with older version
        If irisMajorVersion < 2023  {
            ; StatRowCount is not available in older version
            Set sql = $Replace(sql, "StatRowCount", "0 As StatRowCount")
            ; StatCommands is not available in older version
            Set sql = $Replace(sql, "StatCommands", "0 As StatCommands")
        }
        
        
        If filter.hash '= "" {
            Set sql = sql _ " AND t2.Hash = ?"
            Set args($Increment(args)) = filter.hash
        }

        Set tStatement = ##class(%SQL.Statement).%New()
        Set tStatement.%SelectMode = 1
        Set tRes = ##class(%SQL.Statement).%ExecDirect(.tStatement, sql, args...)

        If tRes.%SQLCODE < 0 {
            Set sc = $$$ERROR($$$SQLError, tRes.%SQLCODE, tRes.%Message)
            $$$ThrowStatus(sc)
        }

        Set serverName = ##class(%SYS.System).GetNodeName(), instanceName = ##class(%SYS.System).GetInstanceName()

        Kill:$Data(^||tmp.res) ^||tmp.res
		
        While tRes.%Next() {
            ; If we use SQLStatsDTO, we can add package mapping
            ; Adding package mapping rebuilds all Extent indexes for the namespace            
            Set ^||tmp.res(tRes.ID)=$lb(tRes.Hash, tRes.Statement, tRes.Day_" 00:00:00", tRes.StatCount, tRes.StatTotal, tRes.StatCommands, tRes.StatVariance, tRes.StatRowCount, "daily", $Namespace)
        }
        
        Set $Namespace = ns
        
        Set id = ""
        For  {
	    	Set id = $Order(^||tmp.res(id), 1, data)
			Quit:id=""
			Set stat = ##class(dc.sqlstats.dto.SQLStatsDTO).%New()
            Set stat.Id = id
            Set stat.Hash = $ListGet(data, 1)
            Set stat.Statement = $ListGet(data, 2)
            Set stat.DateTime = $ListGet(data, 3)
            Set stat.Count = $ListGet(data, 4)
            Set stat.ExecutionTime = $ListGet(data, 5)
            Set stat.Commands = $ListGet(data, 6)
            Set stat.Variance = $ListGet(data, 7)
            Set stat.RowCount = $ListGet(data, 8)
            Set stat.Period = $ListGet(data, 9)
            Set stat.Namespace = $ListGet(data, 10)
            Do stats.Insert(stat)
            Kill ^||tmp.res(id)
        }
    } Catch ex {
        Set sc = ex.AsStatus()
        $$$ThrowStatus(sc)
    }

    Quit stats
]]></Implementation>
</Method>

<Method name="GetHourlyStats">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:dc.sqlstats.dto.FilterStatsDTO,initList:%ListOfObjects=""</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    Set ns = $Namespace

    If $IsObject(initList) {
        Set stats = initList
    } Else {
        Set stats = ##class(%ListOfObjects).%New()
    }

    Try {
        New $ROLES
        Set $ROLES = "%ALL"
        
        If $Namespace '= filter.namespace {
            New $NAMESPACE
            Set $NAMESPACE = filter.namespace
        }
        
    
    
        Set dayStart = $ZDateH($Piece(filter.from, " ", 1), 3)
        Set dayEnd = $ZDateH($Piece(filter.to, " ", 1), 3)

        Set startHour = +$Extract(filter.from, 12, 13)
        Set endHour = +$Extract(filter.to, 12, 13)

        Set args($Increment(args)) = dayStart
        Set args($Increment(args)) = dayStart
        Set args($Increment(args)) = startHour
        Set args($Increment(args)) = dayEnd
        Set args($Increment(args)) = dayEnd
        Set args($Increment(args)) = endHour

        Set sql = "SELECT ID, Day->Day, ""Hour"", StatCount, StatTotal, StatRowCount, StatCommands, StatVariance, Day->Statement->Hash, Day->Statement->Statement "
                    _ "FROM INFORMATION_SCHEMA.STATEMENT_HOURLY_STATS "
                    _ "WHERE (Day->Day > ? OR (Day->Day = ? AND ""Hour"" >= ?)) "
                    _ "AND (Day->Day < ? OR (Day->Day = ? AND ""Hour"" <= ?)) "
        
        Set irisMajorVersion = $SYSTEM.Version.GetMajor()

        ; try to be compatible with older version
        If irisMajorVersion < 2023  {
            ; StatRowCount is not available in older version
            Set sql = $Replace(sql, "StatRowCount", "0 As StatRowCount")
            ; StatCommands is not available in older version
            Set sql = $Replace(sql, "StatCommands", "0 As StatCommands")
            
            ; note : the table STATEMENT_DAILY_STATS exists from 2022.1
            ; so consider this tools works only from 2022.1
        }
        
        If filter.hash '= "" {
            Set sql = sql _ " AND Day->Statement->Hash = ?"
            Set args($Increment(args)) = filter.hash
        }
        
        Set tStatement = ##class(%SQL.Statement).%New()
        Set tStatement.%SelectMode = 0
        Set tRes = ##class(%SQL.Statement).%ExecDirect(.tStatement, sql, args...)

        If tRes.%SQLCODE < 0 {
            Set sc = $$$ERROR($$$SQLError, tRes.%SQLCODE, tRes.%Message)
            $$$ThrowStatus(sc)
        }

        Kill:$Data(^||tmp.res) ^||tmp.res
		
        While tRes.%Next() {
            ; If we use SQLStatsDTO, we can add package mapping
            ; Adding package mapping rebuilds all Extent indexes for the namespace            
            Set ^||tmp.res(tRes.ID)=$lb(tRes.Hash, tRes.Statement, $ZDate(tRes.Day, 3) _ " " _ tRes.Hour _ ":00:00", tRes.StatCount, tRes.StatTotal, tRes.StatCommands, tRes.StatVariance, tRes.StatRowCount, "hourly", $Namespace)
        }

        Set $Namespace = ns

        Set id = ""
        For  {
	    	Set id = $Order(^||tmp.res(id), 1, data)
			Quit:id=""
			Set stat = ##class(dc.sqlstats.dto.SQLStatsDTO).%New()
            Set stat.Id = id
            Set stat.Hash = $ListGet(data, 1)
            Set stat.Statement = $ListGet(data, 2)
            Set stat.DateTime = $ListGet(data, 3)
            Set stat.Count = $ListGet(data, 4)
            Set stat.ExecutionTime = $ListGet(data, 5)
            Set stat.Commands = $ListGet(data, 6)
            Set stat.Variance = $ListGet(data, 7)
            Set stat.RowCount = $ListGet(data, 8)
            Set stat.Period = $ListGet(data, 9)
            Set stat.Namespace = $ListGet(data, 10)
            Do stats.Insert(stat)
            Kill ^||tmp.res(id)
        }
        
    } Catch ex {
        Set sc = ex.AsStatus()
        $$$ThrowStatus(sc)
    }

    Quit stats
]]></Implementation>
</Method>
</Class>


<Class name="dc.sqlstats.dto.FilterStatsDTO">
<Super>%RegisteredObject</Super>
<TimeChanged>67249,72687.243908498</TimeChanged>
<TimeCreated>67249,72687.243908498</TimeCreated>

<Property name="from">
<Description>
Starting date    </Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="to">
<Description>
Ending date</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="hash">
<Description>
The SQL statement hash</Description>
<Type>%String</Type>
</Property>

<Property name="namespace">
<Description>
The namespace used to retrieve sql stats</Description>
<Type>%String</Type>
</Property>

<Property name="period">
<Description>
period "daily", "hourly"</Description>
<Type>%String</Type>
</Property>
</Class>


<Class name="dc.sqlstats.dto.SQLStatsDTO">
<Description>
this class is used to store the statistics of a SQL statement</Description>
<Super>%RegisteredObject,%JSON.Adaptor</Super>
<TimeChanged>67249,72687.247214792</TimeChanged>
<TimeCreated>67249,72687.247214792</TimeCreated>

<Property name="Statement">
<Description>
The SQL statement</Description>
<Type>%String</Type>
<Parameter name="%JSONFIELDNAME" value="statement"/>
</Property>

<Property name="Hash">
<Description>
The hash of the SQL statement (used in INFORMATION_SCHEMA)</Description>
<Type>%String</Type>
<Parameter name="%JSONFIELDNAME" value="hash"/>
</Property>

<Property name="Count">
<Description>
The number of times the SQL statement was executed</Description>
<Type>%Integer</Type>
<Parameter name="%JSONFIELDNAME" value="count"/>
</Property>

<Property name="ExecutionTime">
<Description>
The total execution time of the SQL statement in seconds</Description>
<Type>%Double</Type>
<Parameter name="%JSONFIELDNAME" value="execution_time"/>
</Property>

<Property name="Variance">
<Description>
The variance of the execution time.</Description>
<Type>%Double</Type>
<Parameter name="%JSONFIELDNAME" value="variance"/>
</Property>

<Property name="Commands">
<Description>
The total commands executed by the SQL statement</Description>
<Type>%Integer</Type>
<Parameter name="%JSONFIELDNAME" value="commands"/>
</Property>

<Property name="DateTime">
<Description>
Date and time in format yyyy-mm-dd hh:mm:ss</Description>
<Type>%String</Type>
<Parameter name="%JSONFIELDNAME" value="datetime"/>
</Property>

<Property name="ServerName">
<Description>
The server name...</Description>
<Type>%String</Type>
<InitialExpression>##class(%SYS.System).GetNodeName()</InitialExpression>
<Parameter name="%JSONFIELDNAME" value="server_name"/>
</Property>

<Property name="InstanceName">
<Description>
IRIS instance name</Description>
<Type>%String</Type>
<InitialExpression>##class(%SYS.System).GetInstanceName()</InitialExpression>
<Parameter name="%JSONFIELDNAME" value="instance_name"/>
</Property>

<Property name="Namespace">
<Description>
Namespace of the SQL statement</Description>
<Type>%String</Type>
<InitialExpression>$Namespace</InitialExpression>
<Parameter name="%JSONFIELDNAME" value="namespace"/>
</Property>

<Property name="Period">
<Description>
The period of the statistics
daily or hourly</Description>
<Type>%String</Type>
<Parameter name="%JSONFIELDNAME" value="period"/>
</Property>

<Property name="Id">
<Type>%String</Type>
<Parameter name="%JSONFIELDNAME" value="id"/>
</Property>

<Property name="RowCount">
<Type>%Integer</Type>
<Parameter name="%JSONFIELDNAME" value="row_count"/>
</Property>
</Class>


<Class name="dc.sqlstats.influxdb.PushStats">
<Description><![CDATA[
curl -XPOST "localhost:8086/api/v2/write?bucket=db&precision=s&org=dc" \
 --data-raw "mem,host=host1 used_percent=23.43234543 1556896326"]]></Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>67249,72687.250031452</TimeChanged>
<TimeCreated>67249,72687.250031452</TimeCreated>

<Parameter name="TaskName">
<Default>Influx DB - Push SQL Stats</Default>
</Parameter>

<Parameter name="HistoryTaskName">
<Default>Influx DB - Push SQL Stats History</Default>
</Parameter>

<Parameter name="WRITE">
<Default><![CDATA[/api/v2/write?bucket=${BucketName}&precision=s&org=${Org}]]></Default>
</Parameter>

<Property name="Host">
<Description><![CDATA[
InfluxDB address, <protocol>://<host>:<port>]]></Description>
<Type>%String</Type>
<InitialExpression>"http://influxdb2:8086"</InitialExpression>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="BucketName">
<Description>
InfluxDB bucket name</Description>
<Type>%String</Type>
<InitialExpression>"IRIS_SQL_STATS"</InitialExpression>
</Property>

<Property name="Org">
<Description>
Organization name</Description>
<Type>%String</Type>
<InitialExpression>"dc"</InitialExpression>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="Token">
<Description>
Influx DB Token
If you let it empty, it will try to get the token from ^influx("token") global and then environment variable INFLUX_TOKEN</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="SSLConfig">
<Description>
If https is used, fill in the SSL configuration name</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="SendHistory">
<Description>
If true, it will send the history otherwise it will send the data from the last successful send
It should be set to true for an on demand task.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set tSc = $$$OK
    
    Try {
        If ..SendHistory || ($Get(^influx("last-to-success")) = "") {
            Set tSc = ..SendData($ZdateTime("0,0", 3, 1))
        } Else {
            Set from = ^influx("last-to-success")
            Set from = ##class(%SYSTEM.SQL.Functions).DATEADD("hh", -1, from)
            Set tSc = ..SendData(from)
        }
    } Catch ex {
        Set tSc = ex.AsStatus()
    }

    Return tSc
]]></Implementation>
</Method>

<Method name="CreateOnDemandTask">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $$$OK
	Return:..getTaskId(,,..#HistoryTaskName)'="" $$$ERROR($$$GeneralError,"Task already exist")
	Set task = ##class(%SYS.Task).%New()
	Set task.Name=..#HistoryTaskName
	Set task.Description="Push SQL Stats History to Influx DB."
	Set task.NameSpace=$namespace
	Set task.RunAsUser="_system"
	Set task.TaskClass=..%ClassName(1)
	
	Set task.TimePeriod=5	; On demand
    
	
	Set task.Priority=1

    Set def = ..%New()
    Set def.SendHistory = 1
    Do task.AssignSettings(def)

  	Set sc = task.%Save()

	Return sc
]]></Implementation>
</Method>

<Method name="getTaskId">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sc:%Status=$$$OK,className:%String=..%ClassName(1),name:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set id = "", tStatement = ##class(%SQL.Statement).%New()

	$$$ThrowOnError(tStatement.%PrepareClassQuery("%SYS.Task","TaskListDetail"))
	
	Set tResult = tStatement.%Execute()
	
	While (tResult.%Next(.sc)) {
		
		If $$$ISERR(sc) $$$ThrowStatus(sc)

		If tResult.%Get("TaskClass") = className, tResult.%Get("Name") = name {
			Set id = tResult.%Get("ID")
			Quit
		}
	}
	Quit id
]]></Implementation>
</Method>

<Method name="SendData">
<FormalSpec>from:%TimeStamp={$ZDateTime(+$Horolog_",0", 3, 1)}</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    Set filter = ##class(dc.sqlstats.dto.FilterStatsDTO).%New()
    Set filter.to = $ZDateTime($Horolog, 3, 1)
    
    Set namespaces = ##class(dc.sqlstats.services.SQLStats).GetListNamespaces()

    Set timeUnit = "s"

    Set ptr = 0, stream = ##class(%Stream.GlobalCharacter).%New()

    While $ListNext(namespaces, ptr, namespace) {
        Set filter.namespace = namespace
        Set filter.from = from
        
        Set results = ##class(dc.sqlstats.services.SQLStats).DailyStats(filter)
        Set sc = ##class(dc.sqlstats.services.SQLStats).ConvertToLineProtocol(results, .stream, timeUnit)
        
        If $$$ISERR(sc) {
            Return sc
        }
        
        Set results = ##class(dc.sqlstats.services.SQLStats).HourlyStats(filter)
        Set sc = ##class(dc.sqlstats.services.SQLStats).ConvertToLineProtocol(results, .stream, timeUnit)
        
        If $$$ISERR(sc) {
            Return sc
        }

    }

    If stream.Size = 0 {
        ; Nothing to send ...
        Return sc
    }

    /* 
    Components is an array like this : 
    
    Components("host")="www.intersystems.com"
    Components("netloc")="user:pass@www.intersystems.com:80"
    Components("password")="pass"
    Components("path")="/path/"
    Components("port")=80
    Components("scheme")="http"
    Components("username")="user"
    */
    
    Do ##class(%Net.URLParser).Decompose(..Host, .Components)

    Set httpRequest = ##class(%Net.HttpRequest).%New()
    Set httpRequest.Server = Components("host")
    Set httpRequest.Port = Components("port")
    Set httpRequest.Https = Components("scheme") = "https"
    
    If httpRequest.Https {
        Set httpRequest.SSLConfiguration = ..SSLConfig
    }

    Set token = ..Token
    If token = "" {
        Set token = $Get(^influx("token"))
    }

    If token = "" {
        Set token = $System.Util.GetEnviron("INFLUX_TOKEN")
    }

    Do httpRequest.SetHeader("Authorization", "Token "_ token)
    Do httpRequest.SetHeader("Content-Type", "text/plain; charset=utf-8")
    Do httpRequest.EntityBody.CopyFrom(stream)

    Set endPoint = $Replace(..#WRITE, "${BucketName}", ..BucketName)
    Set endPoint = $Replace(endPoint, "${Org}", ..Org)

    Set sc = httpRequest.Post(endPoint)

    If $$$ISERR(sc) {
        Set ^influx("last-error") = $ZDateTime($Horolog, 3, 1) _ " - " _ $System.Status.GetErrorText(sc)
        Return sc
    }

    Set response = httpRequest.HttpResponse

    Set ^influx("last-status-code") = $ZDateTime($Horolog, 3, 1) _ " " _ response.StatusCode

    If response.StatusCode '= 204 {
        Set ^influx("last-error") = $ZDateTime($Horolog, 3, 1) _ " - " _ "HTTP response: "_ response.Data.Read()
        
        Set sc = $$$ERROR($$$GeneralError, "HTTP response: "_ response.StatusCode)

        Return sc
    }

    Set ^influx("last-to-success") = filter.to

    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="dc.sqlstats.rest.Main">
<Super>%CSP.REST</Super>
<TimeChanged>67249,72687.253849391</TimeChanged>
<TimeCreated>67249,72687.253849391</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
    <Route Url="/ping" Method="GET" Call="Ping"/>
    <Route Url="/daily" Method="GET" Call="Daily"/>
    <Route Url="/hourly" Method="GET" Call="Hourly"/>
    <Route Url="/openapi" Method="GET" Call="GetOpenAPISpec"/>
    <Route Url="/_spec" Method="GET" Call="GetOpenAPISpec"/>
    <Route Url="/namespaces" Method="GET" Call="GetListNamespaces"/>
</Routes>
]]></Data>
</XData>

<Method name="Ping">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set %response.ContentType = "application/json"
    Set message = {
        "message": "pong",
        "timestamp": ($ZDateTime($Horolog, 3)),
        "version": ($ZVersion),
        "system": ($SYSTEM.Version.SystemMode()),
        "hostname":(##class(%SYS.System).GetNodeName())
    }
    Do message.%ToJSON()
    Return $$$OK
]]></Implementation>
</Method>

<Method name="Daily">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If $Get(%request.Data("from",1)) = "" {
        Set from = ##class(%SYSTEM.SQL.Functions).DATEADD("hh", -1, $ZDateTime($Horolog, 3, 1))
        Set from = $Piece(from, " ", 1)
    } Else {
        Set from = $Piece($Get(%request.Data("from",1)), " ", 1)
    }
    
    Set to = $Piece($Get(%request.Data("to",1), $ZDate($Horolog, 3)), " ", 1)
    Set hash = $Get(%request.Data("hash",1))

    Try {
        If '(from ? 4N1"-"2N1"-"2N) {
            ; may be the posix timestamp sent by Grafana
            ; convert epoch to timestamp yyyy-mm-dd
            Set from = $ZDate($ZDTH(from/1000, -2), 3)
        }

        If '(to ? 4N1"-"2N1"-"2N) {
            ; may be the posix timestamp sent by Grafana
            ; convert epoch to timestamp yyyy-mm-dd
            Set to = $ZDate($ZDTH(to/1000, -2), 3)
        }
    } Catch ex {
        Set %response.Status = 400
        Set %response.ContentType = "application/json"
        Set message = {
            "error": "Invalid date",
            "message": "The date must be in the format yyyy-mm-dd or a posix timestamp"
        }
        Do message.%ToJSON()
        Return $$$OK
    }

    

    Set filter = ##class(dc.sqlstats.dto.FilterStatsDTO).%New()
    Set filter.from = from
    Set filter.to = to
    Set filter.hash = hash
    
    If $Get(%request.Data("namespace",1)) '= "" {
        Set filter.namespace = $ZConvert($Get(%request.Data("namespace",1)), "U")
    }

    Set results = ##class(dc.sqlstats.services.SQLStats).DailyStats(filter)

    // stats is an array of dc.sqlstats.dto.SQLStatsDTO
    // the reponse look like this:
    // [
    //     {
    //         "statement": "SELECT * FROM INFORMATION_SCHEMA.STATEMENTS",
    //         "hash": "ABCEDF123456",
    //         "count": 1,
    //         "execution_time": 0.0001,
    //         "variance": 0.000005,
    //         "commands": 1,
    //         "datetime": "2021-06-01 09:00:00",
    //         "server_name": "IRIS",
    //         "instance_name": "IRIS",
    //         "namespace": "USER",
    //         "period": "daily",
    //         "id": "1",
    //         "row_count": 25
    //     }
    // ]
    
    If $$$LOWER(%request.GetCgiEnv("HTTP_ACCEPT")) [ "text/plain" {
        Set %response.ContentType = "text/plain"
        Do ##class(dc.sqlstats.services.SQLStats).ConvertToLineProtocol(results,.gcs)
        Do gcs.OutputToDevice()
        Return $$$OK
    }

    Set %response.ContentType = "application/json"
    Set stats = ##class(dc.sqlstats.services.SQLStats).ConvertToDynamicArray(results)
    Set gcs = ##class(%Stream.GlobalCharacter).%New()
    Do stats.%ToJSON(.gcs)
    Do gcs.OutputToDevice()

    Return $$$OK
]]></Implementation>
</Method>

<Method name="Hourly">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

    If $Get(%request.Data("from",1)) = "" {
        Set from = ##class(%SYSTEM.SQL.Functions).DATEADD("hh", -1, $ZDateTime($Horolog, 3, 1))
    } Else {
        Set from = $Get(%request.Data("from",1))
    }

    Set to = $Get(%request.Data("to",1), $ZDateTime($Horolog, 3, 1))
    Set hash = $Get(%request.Data("hash",1))

    Try {
        If '(from ? 4N1"-"2N1"-"2N1" "2N1":"2N1":"2N) {
            ; may be the posix timestamp sent by Grafana
            ; convert posix to timestamp yyyy-mm-dd
            Set from = $ZDateTime($ZDTH(from/1000, -2), 3, 1)
        }

        If '(to ? 4N1"-"2N1"-"2N1" "2N1":"2N1":"2N) {
            ; may be the posix timestamp sent by Grafana
            ; convert posix to timestamp yyyy-mm-dd
            Set to = $ZDateTime($ZDTH(to/1000, -2), 3, 1)
        }
    } Catch ex {
        Set %response.Status = 400
        Set %response.ContentType = "application/json"
        Set message = {
            "error": "Invalid date",
            "message": "The date must be in the format yyyy-mm-dd hh:mm:ss or a posix timestamp"
        }
        Do message.%ToJSON()
        Return $$$OK
    }

    Set filter = ##class(dc.sqlstats.dto.FilterStatsDTO).%New()
    Set filter.from = from
    Set filter.to = to
    Set filter.hash = hash
    If $Get(%request.Data("namespace",1)) '= "" {
       Set filter.namespace = $ZConvert($Get(%request.Data("namespace",1)), "U")
    }

    Set results = ##class(dc.sqlstats.services.SQLStats).HourlyStats(filter)

    // stats is an array of dc.sqlstats.dto.SQLStatsDTO
    // the reponse look like this:
    // [
    //     {
    //         "statement": "SELECT * FROM INFORMATION_SCHEMA.STATEMENTS",
    //         "hash": "ABCEDF123456",
    //         "count": 1,
    //         "execution_time": 0.0001,
    //         "variance": 0.000005,
    //         "commands": 1,
    //         "datetime": "2021-06-01 09:00:00",
    //         "server_name": "IRIS",
    //         "instance_name": "IRIS",
    //         "namespace": "USER",
    //         "period": "hourly",
    //         "id": "1",
    //         "row_count": 25
    //     }
    // ]

    If $$$LOWER(%request.GetCgiEnv("HTTP_ACCEPT")) [ "text/plain" {
        Set %response.ContentType = "text/plain"
        Do ##class(dc.sqlstats.services.SQLStats).ConvertToLineProtocol(results,.gcs)
        Do gcs.OutputToDevice()
        Return $$$OK
    }

    Set %response.ContentType = "application/json"
    Set stats = ##class(dc.sqlstats.services.SQLStats).ConvertToDynamicArray(results)
    Set gcs = ##class(%Stream.GlobalCharacter).%New()
    Do stats.%ToJSON(.gcs)
    Do gcs.OutputToDevice()
    
    Return $$$OK
]]></Implementation>
</Method>

<Method name="GetOpenAPISpec">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set %response.ContentType = "application/json"

    Set ns = $Namespace 
    New $Namespace 
    Set $Namespace = "%SYS"
    
    Do ##class(Security.Applications).Get(%request.Application, .app)
    Set appDirectory = app("Path")
    Kill app
    Set $Namespace = ns

    Set spec = {}.%FromJSONFile(appDirectory _ "openapi.json")

    Set url = $Select(%request.Secure:"https",1:"http") _ "://"_$Get(%request.CgiEnvs("SERVER_NAME")) _ ":" _ $Get(%request.CgiEnvs("SERVER_PORT")) _ %request.Application
	Set spec.servers = [{"url" : (url)}]

    Set formatter = ##class(%JSON.Formatter).%New()
    Set gcs = ##class(%Stream.GlobalCharacter).%New()
    Do formatter.FormatToStream(spec, .gcs)
    Do gcs.OutputToDevice()

    Return $$$OK
]]></Implementation>
</Method>

<Method name="GetListNamespaces">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set %response.ContentType = "application/json"

    Set list = ##class(dc.sqlstats.services.SQLStats).GetListNamespaces()

    Set array = [], ptr = 0
    While $ListNext(list, ptr, key) {
        Do array.%Push(key)
    }

    Do array.%ToJSON()

    Return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="dc.sqlstats.services.Install">
<TimeChanged>67249,72687.248740974</TimeChanged>
<TimeCreated>67249,72687.248740974</TimeCreated>

<Method name="Init">
<Description><![CDATA[
<summary>
Initializes the SQL statistics service by setting up the necessary namespace and package mappings.
</summary>
<remarks>
This method performs the following steps:
1. Retrieves the current namespace.
2. Switches to the "%SYS" namespace and sets the default database for globals.
3. Checks if the "%All" namespace exists, and if not, creates it.
4. Retrieves the properties of the original namespace.
5. Checks if the "dc.sqlstats" package is mapped in the "%All" namespace, and if not, maps it.
6. Returns the final status code.
</remarks>
<returns>%Status - The status code indicating the success or failure of the initialization process.</returns>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    Set ns = $Namespace
    
    New $Namespace 
    Set $Namespace = "%SYS", p("Globals") = "%DEFAULTDB"

    Set webName = "/csp/sqlstats/api"
    If '##class(Security.Applications).Exists(webName) {
        ; Should be done by zpm, but in case of manual installation, we need to do it here
        Set cspDirectory = $System.Util.InstallDirectory()_"csp/sqlstats/api/"
        set webProperties("Path") = cspDirectory
        set webProperties("CookiePath")="/csp/sqlstats/api/"
        set webProperties("NameSpace") = ns
        set webProperties("Enabled") = 1
        set webProperties("CSPZENEnabled") = 1
        set webProperties("AutheEnabled") = 32
        set webProperties("DeepSeeEnabled") = 0
        set webProperties("iKnowEnabled") = 0
        Set webProperties("DispatchClass")="dc.sqlstats.rest.Main"
        Set webProperties("IsNameSpaceDefault") = 0
        set sc = $$$ADDSC(sc,##class(Security.Applications).Create(webName,.webProperties))
    }

    Set $Namespace = ns
    Do ##class(dc.sqlstats.influxdb.PushStats).CreateOnDemandTask()

    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="dc.sqlstats.services.SQLStats">
<Super>%RegisteredObject</Super>
<TimeChanged>67249,72687.254630943</TimeChanged>
<TimeCreated>67249,72687.254630943</TimeCreated>

<Method name="DailyStats">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:dc.sqlstats.dto.FilterStatsDTO</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    Set results = ##class(%ListOfObjects).%New()
    If filter.namespace = "" {
        Set namespaces = ..GetListNamespaces()
        Set ptr = 0
        While $ListNext(namespaces, ptr, namespace) {
            Set filter.namespace = namespace
            Set results = ##class(dc.sqlstats.dao.SQLStatsDAO).GetDailyStats(filter, .results)
        }
        Set filter.namespace = ""
    } Else {
        Set results = ##class(dc.sqlstats.dao.SQLStatsDAO).GetDailyStats(filter)
    }
    Return results
]]></Implementation>
</Method>

<Method name="HourlyStats">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:dc.sqlstats.dto.FilterStatsDTO</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    Set resulsts = ##class(%ListOfObjects).%New()
    If filter.namespace = "" {
        Set namespaces = ..GetListNamespaces()
        Set ptr = 0
        While $ListNext(namespaces, ptr, namespace) {
            Set filter.namespace = namespace
            Set results = ##class(dc.sqlstats.dao.SQLStatsDAO).GetHourlyStats(filter, .results)
        }
        Set filter.namespace = ""
    } Else {
        Set results = ##class(dc.sqlstats.dao.SQLStatsDAO).GetHourlyStats(filter)
    }
    Return results
]]></Implementation>
</Method>

<Method name="ConvertToDynamicArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>results:%ListOfObjects,removeItemAfterConvert:%Boolean=$$$YES</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
    #dim item As dc.sqlstats.dto.SQLStatsDTO

    Set array = ##class(%DynamicArray).%New()
    Set key = ""
    For  {
        Set item = results.GetNext(.key)
        Quit:key=""

        If item.%IsA("%DynamicObject") {
            Do array.%Push(item)
        } Else {
            Do item.%JSONExportToString(.json)
            Do array.%Push({}.%FromJSON(json))
        }
        Do results.RemoveAt(key)
    }
    Return array
]]></Implementation>
</Method>

<Method name="GetListNamespaces">
<ClassMethod>1</ClassMethod>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
    Do ##class(%SYS.Namespace).ListAll(.result)
    Set key = "", list = ""
    For  {
        Set key = $Order(result(key))
        Quit:key=""
        Continue:$Extract(key, 1, 2)="^^"
        Set $List(list, * + 1) = key
    }
    Return list
]]></Implementation>
</Method>

<Method name="CreateInfluxFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String="/home/irisowner/dev/influxdb-lines.txt",namespaces:%List=..GetListNamespaces(),split:%Boolean=$$$NO,splitSize:%Integer=10000</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

    Set directory = ##class(%File).GetDirectory(fileName)
    If '##class(%File).Exists(directory) {
        Do ##class(%File).CreateDirectoryChain(directory)
    }

    If ##class(%File).Exists(fileName) {
        Do ##class(%File).Delete(fileName)
    }

    Set filter = ##class(dc.sqlstats.dto.FilterStatsDTO).%New()
    Set filter.from = $ZDateTime("0,0", 3, 1)
    Set filter.to = $ZDateTime($Horolog, 3, 1)
    
    Set ptr = 0, stream = ##class(%Stream.FileCharacter).%New()
    Set stream.StreamFormatWrite = 0
    Set stream.LineTerminator = $Char(10)

    Do stream.LinkToFile(fileName)

    While $ListNext(namespaces, ptr, namespace) {
        Set filter.namespace = namespace
        Set results = ..DailyStats(filter)
        Set sc = ..ConvertToLineProtocol(results, .stream)
        If $$$ISERR(sc) {
            Return sc
        }
        Set results = ..HourlyStats(filter)
        Set sc = ..ConvertToLineProtocol(results, .stream)
        If $$$ISERR(sc) {
            Return sc
        }
    }

    Set sc = stream.%Save()

    If $$$ISERR(sc) {
        Return sc
    }

    If 'split {
        Return sc
    }

    Set sc = ..SplitInluxFile(fileName, splitSize)

    If $$$ISOK(sc) {
        Do ##class(%File).Delete(fileName)
    }

    Return sc
]]></Implementation>
</Method>

<Method name="SplitInluxFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String="/home/irisowner/dev/influxdb-lines.txt",splitSize:%Integer=10000</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    If '##class(%File).Exists(fileName) {
        Return $$$ERROR($$$GeneralError, "File not found")
    }

    Set splitFile = ##class(%Stream.FileCharacter).%New()
    
    Do newSplitFile

    Set file = ##class(%Stream.FileCharacter).%New()
    Do file.LinkToFile(fileName)

    While 'file.AtEnd {
        Set line = file.ReadLine()
        Do splitFile.WriteLine(line)
        Do $Increment(count)
        If count = splitSize {
            Set sc = splitFile.%Save()
            If $$$ISERR(sc) {
                Return sc
            }
            Do newSplitFile
            Set count = 0
        }
    }

    Set sc = splitFile.%Save()

    Return sc

newSplitFile
    Do $Increment(fileNumber)
    Set splitFile = ##class(%Stream.FileCharacter).%New()   
    Do splitFile.LinkToFile(fileName _ "." _ $tr($j(fileNumber, 3), " ", "0"))
    Quit
]]></Implementation>
</Method>

<Method name="ConvertToLineProtocol">
<Description>
Do ##class(dc.sqlstats.services.SQLStats).ConvertToLineProtocol(resulsts,.stream)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>results:%ListOfObjects,*stream:%Stream.GlobalCharacter=##class(%Stream.GlobalCharacter).%New(),timeUnit:%String="ns"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set timeFactor = 1
    If timeUnit = "s" {
        Set timeFactor = 1
    } ElseIf timeUnit = "ms" {
        Set timeFactor = 1000
    } ElseIf timeUnit = "µs" {
        Set timeFactor = 1000000
    } ElseIf timeUnit = "ns" {
        Set timeFactor = 1000000000
    } Else {
        $$$ThrowStatus($$$ERROR($$$GeneralError, "Invalid time unit only s, ms, us, ns are allowed"))
    }

    Set replaceStr = "%%1%%"
    Set stream.LineTerminator = $Char(10)

    #dim item As dc.sqlstats.dto.SQLStatsDTO
    Set key = ""

    For  {
        Set item = results.GetNext(.key)
        Quit:key=""

        If item.DateTime = "" {
            Continue
        }

        If item.Period = "daily" {
            Set line = "sqlstats_daily"
        } ElseIf item.Period = "hourly" {
            Set line = "sqlstats_hourly"
        } Else {
            $$$ThrowStatus($$$ERROR($$$GeneralError, "Invalid period only daily or hourly are allowed"))
        }
        
        for tag = "server_name", "instance_name", "namespace", "id" {
            Set line = line _ "," _ tag _ "=" _ replaceStr
        }

        For tagValue = item.ServerName, item.InstanceName, item.Namespace, item.Id {
            Set escapedTagValue = ..EscapeTagValue(tagValue)
            Set line = $Replace(line, replaceStr, escapedTagValue, 0, 1)
        }
        
        Set line = line _ " count=" _ +item.Count _ "i"
        Set line = line _ ",commands=" _ +item.Commands _ "i"
        Set line = line _ ",row_count=" _ +item.RowCount _ "i"
        Set line = line _ ",execution_time=" _ $s(+item.ExecutionTime<1:$fn(item.ExecutionTime,,12),1:+item.ExecutionTime)
        Set line = line _ ",variance=" _ $s(+item.Variance<1:$fn(item.Variance,,15),1:+item.Variance)
        Set line = line _ ",hash="""_ ..EscapeFieldValue(item.Hash) _ """"
        Set line = line _ ",statement="""_ ..EscapeFieldValue(item.Statement) _""""
        
        Set line = line _ " " _ ($ZDateTime($ZDTH(item.DateTime, 3, 1), -2) * timeFactor)
        
        Do stream.WriteLine($Translate(line, $Char(13,10), ""))
    }
    
    Return $$$OK
]]></Implementation>
</Method>

<Method name="EscapeTagValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>tagValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set escapedTagValue = $Replace(tagValue, "=", "\=")
    Set escapedTagValue = $Replace(escapedTagValue, " ", "\ ")
    Set escapedTagValue = $Replace(escapedTagValue, ",", "\,")
    Return escapedTagValue
]]></Implementation>
</Method>

<Method name="EscapeFieldValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>fieldValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set escapedFieldValue = $Replace(fieldValue, "\", "\\")
    Set escapedFieldValue = $Replace(escapedFieldValue, """", "\""")
    Return escapedFieldValue
]]></Implementation>
</Method>
</Class>
</Export>
